name: Build, Test and Push Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: hoomaanmoradi/reedsshepp-mlops
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from release
        if: github.event_name == 'release'
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        
      - name: Set version from workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate Google Cloud credentials
        run: |
          # Write credentials to file first
          echo "${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}" > gcp-credentials.json
          
          # Verify file was created
          if [ ! -f gcp-credentials.json ]; then
            echo "::error::Failed to create gcp-credentials.json"
            exit 1
          fi
          
          # Make file readable
          chmod 644 gcp-credentials.json
          
          # Validate JSON using jq
          if ! jq empty gcp-credentials.json 2>/tmp/validate-json-error; then
            echo "::error::Invalid JSON in GOOGLE_CLOUD_CREDENTIALS"
            cat /tmp/validate-json-error
            exit 1
          fi
          
          echo "✅ GCP credentials are valid"
          echo "GCP_CREDS_FILE=$GITHUB_WORKSPACE/gcp-credentials.json" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }}
            ${{ env.DOCKER_IMAGE }}:latest
          file: Dockerfile
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          # Copy the validated credentials to the container
          docker run --rm \
            -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
            -v "$GITHUB_WORKSPACE/gcp-credentials.json:/app/gcp-credentials.json" \
            ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }} \
            python -c "\
              import os; \
              from google.cloud import storage; \
              print(f'✅ GCP Application Default Credentials: {os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\", \"Not set\")}'); \
              print(f'✅ GCS Client initialized: {storage.Client() is not None}')\
            "

      - name: Verify Docker container
        run: |
          # Run a simple health check
          docker run --rm -d --name test-container \
            -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
            -v "$GITHUB_WORKSPACE/gcp-credentials.json:/app/gcp-credentials.json" \
            -p 8080:8080 \
            ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }}
            
          # Wait for the container to start
          sleep 10
          
          # Check if the container is running
          if ! docker ps | grep -q test-container; then
            echo "::error::Container failed to start"
            docker logs test-container || true
            exit 1
          fi
          
          # Cleanup
          docker stop test-container