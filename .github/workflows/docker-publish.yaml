name: Build, Test and Push Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: hoomaanmoradi/reedsshepp-mlops
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from release
        if: github.event_name == 'release'
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        
      - name: Set version from workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup GCP Credentials
        id: gcp-creds
        run: |
          # Create a clean credentials file
          CREDS_FILE="$GITHUB_WORKSPACE/gcp-credentials.json"
          
          # Remove any existing file
          rm -f "$CREDS_FILE"
          
          # Write the credentials with proper formatting
          echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > "$CREDS_FILE.tmp"
          
          # Remove any trailing whitespace and newlines
          sed -i 's/[\r\n]//g' "$CREDS_FILE.tmp"
          
          # Format the JSON with jq and write to final file
          if ! jq . "$CREDS_FILE.tmp" > "$CREDS_FILE" 2>/tmp/format-error; then
            echo "::error::Failed to format GCP credentials JSON"
            cat /tmp/format-error
            exit 1
          fi
          
          # Cleanup
          rm -f "$CREDS_FILE.tmp"
          
          # Verify the file exists and is valid JSON
          if [ ! -f "$CREDS_FILE" ]; then
            echo "::error::Failed to create GCP credentials file"
            exit 1
          fi
          
          # Set permissions
          chmod 644 "$CREDS_FILE"
          
          # Verify JSON is valid
          if ! jq empty "$CREDS_FILE" 2>/tmp/validate-error; then
            echo "::error::Invalid JSON in GCP credentials"
            cat /tmp/validate-error
            exit 1
          fi
          
          echo "✅ GCP credentials are valid"
          echo "GCP_CREDS_FILE=$CREDS_FILE" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }}
            ${{ env.DOCKER_IMAGE }}:latest
          file: Dockerfile
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          # Create a test script
          cat > test_gcp.py << 'EOF'
          import os
          from google.cloud import storage
          from google.auth import default
          
          print(f"✅ GCP Application Default Credentials: {os.environ.get('GOOGLE_APPLICATION_CREDENTIALS', 'Not set')}")
          
          try:
              # Verify we can get credentials
              credentials, project = default()
              print(f"✅ Successfully obtained GCP credentials for project: {project}")
              
              # Initialize the client
              client = storage.Client()
              print("✅ Successfully created GCS client")
              
              # Just verify we can access the client without listing buckets
              # This requires fewer permissions than listing buckets
              print("✅ GCS client is properly configured")
              
          except Exception as e:
              print(f"❌ GCP initialization failed: {str(e)}")
              print("\nTroubleshooting tips:")
              print("1. Verify the service account has the 'Storage Object Viewer' role")
              print("2. Check if the credentials file is valid and not expired")
              print("3. Ensure the service account email matches the one in your GCP project")
              raise
          EOF
          
          # Copy the test script and credentials to the container
          docker run --rm \
            -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
            -v "$GITHUB_WORKSPACE/gcp-credentials.json:/app/gcp-credentials.json" \
            -v "$GITHUB_WORKSPACE/test_gcp.py:/app/test_gcp.py" \
            ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }} \
            python /app/test_gcp.py

      - name: Verify Docker container
        run: |
          # Run a simple health check
          docker run --rm -d --name test-container \
            -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
            -v "$GITHUB_WORKSPACE/gcp-credentials.json:/app/gcp-credentials.json" \
            -p 8080:8080 \
            ${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_VERSION }}
            
          # Wait for the container to start
          sleep 10
          
          # Check if the container is running
          if ! docker ps | grep -q test-container; then
            echo "::error::Container failed to start"
            docker logs test-container || true
            exit 1
          fi
          
          # Cleanup
          docker stop test-container